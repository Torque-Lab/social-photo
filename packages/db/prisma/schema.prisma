// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id       String   @id @db.VarChar(255) @default(cuid())
  username String @unique   @db.VarChar(255)
  name     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  image    String?   @db.VarChar(255)
  password String   @db.VarChar(255)

  photos     Photo[] @relation("photo")
  followers Follow[] @relation("FollowedBy")
  follows   Follow[] @relation("Following")
  likes     Like[] @relation("like")
  comments  Comment[] @relation("comment")
  saves     Save[] @relation("savephoto")
}

model Photo {
  id        String   @id @db.VarChar(255) @default(cuid())
  url    String   
  title     String
  description String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId String
  user   User   @relation(name:"photo",fields: [userId], references: [id])

  likes     Like[] @relation("like")
  comments  Comment[] @relation("comment")
  saves     Save[] @relation("savephoto")
}
model Save{
  userId String
  photoId String

  user  User  @relation(name:"savephoto",fields: [userId], references: [id])
  photo Photo @relation(name:"savephoto",fields: [photoId], references: [id])

  @@id([userId, photoId])
}

model Like {
  userId String
  photoId String

  user  User  @relation( name:"like",fields: [userId], references: [id])
  photo Photo @relation( name:"like",fields: [photoId], references: [id])

  @@id([userId, photoId])
}

model Follow {
  followerId String
  followingId String

  follower User @relation("Following", fields: [followerId], references: [id])
  following User @relation("FollowedBy", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Comment {
  id       String   @id @db.VarChar(255) @default(cuid())
  content  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId  String
  photoId String

  user   User  @relation(name:"comment",fields: [userId], references: [id])
  photo  Photo @relation(name:"comment",fields: [photoId], references: [id])
}
